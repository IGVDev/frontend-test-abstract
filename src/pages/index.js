import Head from "next/head";

import { Inter, Island_Moments } from "next/font/google";
import styles from "@/styles/Home.module.css";
import axios from "axios";
const inter = Inter({ subsets: ["latin"] });
import { useEffect, useState } from "react";
import {
  Container,
  Stack,
  Input,
  Button,
  SimpleGrid,
  Flex,
  Box,
  Modal,
  ModalOverlay,
  ModalHeader,
  ModalBody,
  ModalContent,
  ModalCloseButton,
  useDisclosure,
  Text,
  Spinner,
} from "@chakra-ui/react";
import PokemonCard from "@/components/PokemonCard";
import PokemonData from "@/components/PokemonData";

export default function Home() {
  const pokemonDataModal = useDisclosure();

  const [totalPages, setTotalPages] = useState(0);
  const [caughtPokemon, setCaughtPokemon] = useState([]);

  const [isLoading, setIsLoading] = useState(false);
  const [pokemon, setPokemon] = useState([]);
  const [selectedPokemon, setSelectedPokemon] = useState();
  const [currentPage, setCurrentPage] = useState(1);

  const updateCaughtPokemon = (pokemon, isCaught) => {
    if (isCaught) {
      setCaughtPokemon([...caughtPokemon, pokemon]);
    } else {
      setCaughtPokemon(caughtPokemon.filter((p) => p.id !== pokemon.id));
    }
  };

  useEffect(() => {
    setIsLoading(true);
    axios
      .get(
        `https://pokeapi.co/api/v2/pokemon/?limit=20&offset=${
          (currentPage - 1) * 20
        }`
      )
      .then(async ({ data }) => {
        const promises = data.results.map((result) => axios(result.url));
        const fetchedPokemon = (await Promise.all(promises)).map(
          (res) => res.data
        );
        setPokemon(fetchedPokemon);
        setTotalPages(Math.ceil(data.count / 20));
        setIsLoading(false);
      });
    axios.get(`/api/catched`).then((res) => {
      setCaughtPokemon(res.data);
    });
  }, [currentPage]);

  useEffect(() => {}, [caughtPokemon]);

  function handleFirstPage() {
    setCurrentPage(1);
  }

  function handlePreviousPage() {
    setCurrentPage(currentPage - 1);
  }

  function handleNextPage() {
    setCurrentPage(currentPage + 1);
  }

  function handleLastPage() {
    setCurrentPage(totalPages);
  }

  function handleViewPokemon(pokemon) {
    setSelectedPokemon(pokemon);
    pokemonDataModal.onOpen();
  }

  const isPokemonCaught = (pokemonId) => {
    return caughtPokemon.some((pokemon) => pokemon.id === pokemonId);
  };

  return (
    <>
      <Head>
        <title>Pokemon Challenge</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex
        alignItems="center"
        minH="100vh"
        justifyContent="space-between"
        padding="6rem"
        flexDir="column"
      >
        <Container maxW="container.lg">
          <Stack p="5" alignItems="center" spacing="5">
            <SimpleGrid spacing="5" columns={{ base: 1, md: 5 }} position="relative">
              {isLoading && (
                <Flex
                  backdropFilter={"blur(4px)"}
                  height="100%"
                  w="100%"
                  position="absolute"
                  zIndex="1"
                  alignItems="center"
                  justifyContent="center"
                >
                  <Spinner
                    thickness="6px"
                    emptyColor="gray.400"
                    speed="0.8s"
                    size="xl"
                  />
                </Flex>
              )}
              {pokemon.map((pokemon) => (
                <Box
                  as="button"
                  key={pokemon.id}
                  onClick={() => handleViewPokemon(pokemon)}
                >
                  <PokemonCard
                    pokemon={pokemon}
                    isCaught={isPokemonCaught(pokemon.id)}
                  />
                </Box>
              ))}
            </SimpleGrid>

            <Stack
              direction="row"
              justifyContent="center"
              alignItems="center"
              spacing={0}
              height="40px"
            >
              <Button
                onClick={handleFirstPage}
                isDisabled={currentPage === 1}
                borderRightRadius={0}
                bgColor={"lightgray"}
              >
                |&lt;
              </Button>
              <Button
                onClick={handlePreviousPage}
                isDisabled={currentPage === 1}
                borderRadius={0}
                bgColor={"lightgray"}
              >
                &lt;
              </Button>
              <Flex height="inherit" alignItems={"center"} padding="6">
                <Text>{`${currentPage} / ${totalPages}`}</Text>
              </Flex>
              <Button
                onClick={handleNextPage}
                isDisabled={currentPage === totalPages}
                borderRadius={0}
                bgColor={"lightgray"}
              >
                &gt;
              </Button>
              <Button
                onClick={handleLastPage}
                isDisabled={currentPage === totalPages}
                borderLeftRadius={0}
                bgColor={"lightgray"}
              >
                &gt;|
              </Button>
            </Stack>
          </Stack>
        </Container>
      </Flex>
      <Modal {...pokemonDataModal}>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader textTransform="capitalize">
            {selectedPokemon?.name}
          </ModalHeader>
          <ModalCloseButton />
          <ModalBody>
            {selectedPokemon && (
              <PokemonData
                pokemon={selectedPokemon}
                updateCaughtPokemon={updateCaughtPokemon}
              />
            )}
          </ModalBody>
        </ModalContent>
      </Modal>
    </>
  );
}
