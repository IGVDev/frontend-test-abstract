import Head from "next/head";

import axios from "axios";
import { useEffect, useState } from "react";
import {
  Container,
  Stack,
  Button,
  SimpleGrid,
  Flex,
  Box,
  Modal,
  ModalOverlay,
  ModalHeader,
  ModalBody,
  ModalContent,
  ModalCloseButton,
  useDisclosure,
  Text,
  Spinner,
  Heading,
  HStack,
  useColorMode,
} from "@chakra-ui/react";
import PokemonCard from "@/components/PokemonCard";
import PokemonData from "@/components/PokemonData";
import { FaMoon, FaSun } from "react-icons/fa";

export default function Home() {
  const pokemonDataModal = useDisclosure();

  const [totalPages, setTotalPages] = useState(0);
  const [caughtPokemon, setCaughtPokemon] = useState([]);
  const [showCaughtOnly, setShowCaughtOnly] = useState(false);
  const [caughtPokemonDetails, setCaughtPokemonDetails] = useState([]);

  const [isLoading, setIsLoading] = useState(false);
  const [pokemon, setPokemon] = useState([]);
  const [selectedPokemon, setSelectedPokemon] = useState();
  const [currentPage, setCurrentPage] = useState(1);

  const updateCaughtPokemon = (pokemon, isCaught) => {
    if (isCaught) {
      setCaughtPokemon([...caughtPokemon, pokemon]);
    } else {
      setCaughtPokemon(caughtPokemon.filter((p) => p.id !== pokemon.id));
    }
  };

  const { colorMode, toggleColorMode } = useColorMode();

  useEffect(() => {
    if (!showCaughtOnly) {
      setIsLoading(true);
      axios
        .get(
          `https://pokeapi.co/api/v2/pokemon/?limit=20&offset=${
            (currentPage - 1) * 20
          }`
        )
        .then(async ({ data }) => {
          const promises = data.results.map((result) => axios(result.url));
          const fetchedPokemon = (await Promise.all(promises)).map(
            (res) => res.data
          );
          setPokemon(fetchedPokemon);
          setTotalPages(Math.ceil(data.count / 20));
          setIsLoading(false);
        });
      axios.get(`/api/catched`).then((res) => {
        setCaughtPokemon(res.data);
      });
      window.scrollTo(0, 0);
    }
  }, [currentPage, showCaughtOnly]);

  useEffect(() => {
    if (showCaughtOnly && caughtPokemon.length > 0) {
      setIsLoading(true);
      const fetchCaughtPokemonDetails = async () => {
        try {
          const startIndex = (currentPage - 1) * 20;
          const caughtSubset = caughtPokemon.slice(startIndex, startIndex + 20);
          const promises = caughtSubset.map((p) =>
            axios.get(`https://pokeapi.co/api/v2/pokemon/${p.id}`)
          );
          const results = await Promise.all(promises);
          const details = results.map((res) => res.data);
          setCaughtPokemonDetails(details);
          setTotalPages(Math.ceil(caughtPokemon.length / 20));
        } catch (error) {
          console.error("Failed to fetch caught PokÃ©mon details:", error);
        } finally {
          setIsLoading(false);
        }
      };

      fetchCaughtPokemonDetails();
    }
  }, [showCaughtOnly, caughtPokemon, currentPage]);

  function handleFirstPage() {
    setCurrentPage(1);
  }

  function handlePreviousPage() {
    setCurrentPage(currentPage - 1);
  }

  function handleNextPage() {
    setCurrentPage(currentPage + 1);
  }

  function handleLastPage() {
    setCurrentPage(totalPages);
  }

  function handleViewPokemon(pokemon) {
    setSelectedPokemon(pokemon);
    pokemonDataModal.onOpen();
  }

  function isPokemonCaught(pokemonId) {
    return caughtPokemon.some((pokemon) => pokemon.id === pokemonId);
  }

  function toggleCaughtOnly(bool) {
    setCurrentPage(1);
    setShowCaughtOnly(bool);
  }

  const displayedPokemon = showCaughtOnly ? caughtPokemonDetails : pokemon;

  return (
    <>
      <Head>
        <title>Pokemon Challenge</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex
        alignItems="center"
        minH="100vh"
        justifyContent="space-between"
        paddingY="2rem"
        flexDir="column"
      >
        <Container maxW="container.lg">
          <Button
            position="absolute"
            top={8}
            right={8}
            onClick={toggleColorMode}
          >
            {colorMode === "light" ? <FaMoon /> : <FaSun />}
          </Button>
          <Heading p={4} textAlign={"center"}>
            POKEDEX
          </Heading>
          <nav>
            <HStack justifyContent={"center"}>
              <Button
                onClick={() => toggleCaughtOnly(false)}
                isDisabled={!showCaughtOnly}
                aria-label="Show all pokemon"
              >
                All Pokemon
              </Button>
              <Text> - </Text>
              <Button
                onClick={() => toggleCaughtOnly(true)}
                isDisabled={showCaughtOnly}
                aria-label="Show caught pokemon only"
              >
                My Pokemon
              </Button>
            </HStack>
          </nav>
          <Stack p="5" alignItems="center" spacing="5">
            <SimpleGrid
              spacing="5"
              columns={{ base: 1, md: 5 }}
              position="relative"
            >
              {isLoading && (
                <Flex
                  backdropFilter={"blur(4px)"}
                  height="100%"
                  w="100%"
                  position="absolute"
                  zIndex="1"
                  alignItems="center"
                  justifyContent="center"
                >
                  <Spinner
                    thickness="6px"
                    emptyColor="gray.400"
                    speed="0.8s"
                    size="xl"
                  />
                </Flex>
              )}
              {displayedPokemon.map((pokemon) => (
                <Box
                  as="button"
                  key={pokemon.id}
                  onClick={() => handleViewPokemon(pokemon)}
                >
                  <PokemonCard
                    pokemon={pokemon}
                    isCaught={isPokemonCaught(pokemon.id)}
                  />
                </Box>
              ))}
            </SimpleGrid>
            {displayedPokemon.length === 0 && showCaughtOnly && (
              <Stack justifyContent={"center"}>
                <Text textAlign={"center"} fontWeight="bold">
                  You have no Pokemon :(
                </Text>
                <Text textAlign={"center"} fontWeight="bold">
                  Get out there and catch your first one!
                </Text>
              </Stack>
            )}

            <nav role="navigation" aria-label="Paginated Navigation">
              <Stack
                direction="row"
                justifyContent="center"
                alignItems="center"
                spacing={0}
                height="40px"
              >
                <Button
                  onClick={handleFirstPage}
                  isDisabled={currentPage === 1}
                  borderRightRadius={0}
                  bgColor={"lightgray"}
                  color="black"
                  fontWeight="bold"
                  aria-label="Go to first page"
                >
                  |&lt;
                </Button>
                <Button
                  onClick={handlePreviousPage}
                  isDisabled={currentPage === 1}
                  borderRadius={0}
                  bgColor={"lightgray"}
                  color="black"
                  fontWeight="bold"
                  aria-label="Go to previous page"
                >
                  &lt;
                </Button>
                <Flex
                  height="inherit"
                  alignItems={"center"}
                  padding="6"
                  aria-label={`Page ${currentPage} of ${totalPages}`}
                >
                  <Text
                    whiteSpace={"nowrap"}
                  >{`${currentPage} / ${totalPages}`}</Text>
                </Flex>
                <Button
                  onClick={handleNextPage}
                  isDisabled={currentPage === totalPages}
                  borderRadius={0}
                  bgColor={"lightgray"}
                  color="black"
                  fontWeight="bold"
                  aria-label="Go to next page"
                >
                  &gt;
                </Button>
                <Button
                  onClick={handleLastPage}
                  isDisabled={currentPage === totalPages}
                  borderLeftRadius={0}
                  bgColor={"lightgray"}
                  color="black"
                  fontWeight="bold"
                  aria-label="Go to last page"
                >
                  &gt;|
                </Button>
              </Stack>
            </nav>
          </Stack>
        </Container>
      </Flex>
      <Modal {...pokemonDataModal}>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader textTransform="capitalize">
            {selectedPokemon?.name}
          </ModalHeader>
          <ModalCloseButton />
          <ModalBody>
            {selectedPokemon && (
              <PokemonData
                pokemon={selectedPokemon}
                updateCaughtPokemon={updateCaughtPokemon}
              />
            )}
          </ModalBody>
        </ModalContent>
      </Modal>
    </>
  );
}
